{"body":"# Isodrive\r\n\r\nIsometric game engine.\r\n\r\n## Usage\r\n\r\nPick one script from `dist/` folder and create Isometric UI in following way:\r\n\r\n```javascript\r\nvar ui = Isodrive.create({\r\n  // Id or <canvas> element itself\r\n  canvas: 'field',\r\n\r\n  // Hashmap of sprites\r\n  sprites: {\r\n    // Property name - sprite's id,\r\n    // Value - \"url\" # \"x-offset\" x \"y-offset\"\r\n    block: '/images/block.png#32x16',\r\n    player: '/images/player.png#32x12'\r\n  },\r\n\r\n  // Isometric cell properties\r\n  cell: {\r\n    width: 64,\r\n    height: 32\r\n  },\r\n\r\n  // Zone configuration\r\n  zone: {\r\n    size: 8\r\n  }\r\n})\r\n```\r\n\r\n### Items\r\n\r\nEngine consists of zones, which are basically cubes with width of 2 zone sizes\r\nfrom options, and zones consists of items. Item is basically a sprite with\r\nposition and some class methods.\r\n\r\nAll items are instances of `Isodrive.Item` class. You can instaniate by calling:\r\n\r\n```javascript\r\nvar item = new Isodrive.Item({\r\n  // Item id, must be unique\r\n  id: 123,\r\n\r\n  // Item type, not used by engine itself\r\n  type: 'some-user-specific-type',\r\n\r\n  // Id of sprite to render\r\n  sprite: 'sprite',\r\n\r\n  // Position of item\r\n  x: 0,\r\n  y: 0,\r\n  z: 0,\r\n\r\n  // If true - players won't be able to pass through this item\r\n  obstacle: true,\r\n\r\n  // If true - gravitation applies to the item (NOT IMPLEMENTED YET!)\r\n  gravitable: true\r\n});\r\n```\r\n\r\nAnd you can add item to the map by calling `ui.add(item)`.\r\n\r\n### Player item\r\n\r\nOnly one item is required to exists and to be initialized first - player item.\r\nMap will follow player's movement and zones will be loaded if player will reach\r\ntheir boundaries.\r\n\r\nYou should set map's player before inserting any other items: `ui.setPlayer(p)`.\r\n\r\n### Item methods\r\n\r\n#### Item#setSprite(id)\r\n\r\nChange item's sprite\r\n\r\n#### Item#animate({ props }, interval, callback)\r\n\r\nA jquery-like animation method. Following props are available: `x`, `y`, `z`,\r\n`dx`, `dy`, `dz`, `sprite`.\r\n\r\n#### Item#move(dx, dy, dz)\r\n\r\nMove item by relative offset\r\n\r\n#### Item#setPosition(x, y, z)\r\n\r\nSet item's absolute position.\r\n\r\n#### Item#reset()\r\n\r\nReset all queued animations.\r\n\r\n#### Item#remove()\r\n\r\nRemove item from map.\r\n\r\n#### Item#command(type, args, callback)\r\n\r\nAbstraction, only one command is implemented by default - `remove`. Could be\r\noverrided by subclasses. On execution emits `command` event.\r\n\r\n### Isodrive methods\r\n\r\nIsodrive map has it's own methods too.\r\n\r\n#### Isodrive#setPlayer(item)\r\n\r\nSets map's player. Map will follow player if it'll change it's position.\r\n\r\n#### Isodrive#hasObstacle(x, y, z)\r\n\r\nReturns `Item` instance if there's obstacle on specified position. Also may\r\nreturn `true` if specified position is out of loaded zones' ranges. Otherwise\r\nreturns `false`.\r\n\r\n#### Isodrive#getItem(id)\r\n\r\nFinds item by id.\r\n\r\n#### Isodrive#player\r\n\r\nCurrent map's player.\r\n\r\n### Isodrive Events\r\n\r\nResult of `Isodrive.create()` is an instance of [EventEmitter2][0]. And can emit\r\nfollowing events:\r\n\r\n#### `load`\r\n\r\nEmitted once ui is ready to be rendered. Happens once all sprites are loaded.\r\n\r\n#### `zone:load`\r\n\r\nEmitted once player enters new zone and engine wants you to fetch items from\r\nserver.\r\n\r\nZone configuration consists of following properties: `lx`, `ly`, `lz`, `rx`,\r\n`ry`, `rz`. Which basically means inclusive left and exclusive right positions\r\nof zone ranges.\r\n\r\n#### LICENSE\r\n\r\nCopyright (c) 2012, Fedor Indutny.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n[0]: https://github.com/hij1nx/eventemitter2\r\n","google":"UA-36693665-1","tagline":"Isometric game engine","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Isodrive"}